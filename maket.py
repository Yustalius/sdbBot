import telebot
import sqlite3
import random
import io
from datetime import datetime
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice

bot = telebot.TeleBot('7029750604:AAEh3Ozvv2BGmDY_VUvQBseulIiPQ-fKP60')
paymentToken = '381764678:TEST:83709'

global markupKeyboard
markupKeyboard = ReplyKeyboardMarkup(resize_keyboard=True)
# servicesButton = KeyboardButton("–ö–£–ü–ò–¢–¨ –ë–ò–õ–ï–¢üé´")
# markupKeyboard.add(servicesButton)
trackRequestButton = KeyboardButton("–ó–ê–ö–ê–ó–ê–¢–¨ –¢–†–ï–öüé∂")
markupKeyboard.add(trackRequestButton)
infoButton = KeyboardButton('–û SDB‚ÑπÔ∏è')
nextPartyButton = KeyboardButton('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ç—É—Å–æ–≤–∫–∞?üßê')
markupKeyboard.row(infoButton, nextPartyButton)

global delete_track_markup
delete_track_markup = InlineKeyboardMarkup()
delete_track_button = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫', callback_data='delete track')
delete_track_markup.add(delete_track_button)

global new_track_message
new_track_message = None

global party_name
party_name = None

global track_clicks
track_clicks = 0

global track_cancellations
track_cancellations = 0

global sdb_channel_id
sdb_channel_id = -1002065888143

global track_name
track_name = None

global verified_track_name
verified_track_name = None

global track_query
track_query = False

global transfer_verification_query
transfer_verification_query = False

global transfer_verification_callback
transfer_verification_callback = None

global verified_track_query
verified_track_query = False

global track_list
track_list = []

global tickets_list
tickets_list = []

global verified_track_dict
verified_track_dict = {}

ticket_price = [LabeledPrice(f'–ë–∏–ª–µ—Ç –Ω–∞ {party_name}', 35000)]
track_price = [LabeledPrice('–ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫', 30000)]


def ticket_invoice(message):
    bot.send_invoice(
        message.chat.id,
        '–ë–∏–ª–µ—Ç',
        f'–ë–∏–ª–µ—Ç –Ω–∞ {party_name}',
        'TICKET',
        paymentToken,
        'RUB',
        ticket_price,
    )


def db_check(message):
    name = message.from_user.first_name
    tg_id = message.from_user.id
    nickname = message.from_user.username

    conn = sqlite3.connect('/data/sdb.db')
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT( * ) FROM users WHERE tg_id = ?', (tg_id,))
    count = cursor.fetchone()[0]
    if count == 0:
        cursor.execute('INSERT INTO users (name, nickname, tg_id) VALUES (?, ?, ?)', (name, nickname, tg_id))
        make_log(nickname, 'added to database')
    make_log(nickname, 'in database')
    conn.commit()
    cursor.close()
    conn.close()


def subscribe_check(message):
    subscribe = bot.get_chat_member(sdb_channel_id, message.from_user.id)

    if subscribe.status == "member" or subscribe.status == "creator" or subscribe.status == "administrator":
        return True
    else:
        return False


def list_of_tracks():
    global tracks_text
    tracks_text = '–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:'
    i = 1
    for track in track_list:
        tracks_text += f'\n{i}. {track}'
        i += 1
    make_log('admin', f'{track_list}')


def find_all_tickets():
    conn = sqlite3.connect('/data/sdb.db')
    cursor = conn.cursor()

    cursor.execute('SELECT ticket_key FROM tickets')
    tickets = cursor.fetchall()

    conn.commit()
    cursor.close()
    conn.close()

    return tickets


def make_tickets_list_text(tickets):
    global tickets_list
    tickets_list = [ticket[0] for ticket in tickets]
    make_log('admin', f'Available tickets: {tickets_list}')

    tickets_text = '–ö—É–ø–ª–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã: '
    for ticket in tickets_list:
        tickets_text += f'\n‚Ä¢ –ë–∏–ª–µ—Ç {ticket}'

    return tickets_text


def delete_ticket(message):
    global tickets_list
    if message.text in f'{tickets_list}':
        conn = sqlite3.connect('/data/sdb.db')
        cursor = conn.cursor()

        cursor.execute('DELETE FROM tickets WHERE ticket_key = ?', (message.text,))

        conn.commit()
        cursor.close()
        conn.close()

        tickets = find_all_tickets()
        tickets_text = make_tickets_list_text(tickets)

        bot.edit_message_text(tickets_text, message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.id)
        make_log('admin', f'ticket {message.text} deleted')

        bot.register_next_step_handler(message, delete_ticket)
    control_panel(message)


def control_panel(message):
    make_log(message.from_user.username, 'control panel')
    bot.send_message(message.chat.id, '<b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>‚¨áÔ∏è', reply_markup=markupKeyboard, parse_mode='html')


def track(message):
    global track_query, track_name, new_track_message, track_cancellations
    track_name = message.text.strip()
    new_track_message = message
    print(message.text.lower())

    if message.text.lower() == '/start':
        print('start')
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)

        track_cancellations += 1
        make_log(message.from_user.username, 'request /start cancelled')
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)

        track_cancellations += 1
        make_log(message.from_user.username, 'request cancelled')
        control_panel(message)
    else:
        if track_name == '/start':
            control_panel(message)
        else:
            track_query = True
            bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–µ–∫–∞‚è≥', reply_markup=markupKeyboard)
            make_log(message.from_user.username, f'request: {track_name}')

            verification_markup = InlineKeyboardMarkup()
            verifyButton = InlineKeyboardButton('–û–¥–æ–±—Ä–∏—Ç—å', callback_data='verify track')
            rejectButton = InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å', callback_data='reject track')
            verification_markup.row(verifyButton, rejectButton)
            make_log('INFO', f"'{track_name}' sent to verification")

            bot.send_message(905069756,
                             '–ó–∞–∫–∞–∑–∞–ª–∏ —Ç—Ä–µ–∫ ' + track_name +
                             '\n\n–î–∞–Ω–Ω—ã–µ:\n' + 'ID: ' + f'{message.from_user.id}' +
                             '\n' + '–ò–º—è: ' + f'{message.from_user.first_name}' +
                             '\n' + '–ù–∏–∫: @' + f'{message.from_user.username}'
                             , reply_markup=verification_markup)


def track_waiting_time():
    track_time = (len(track_list) * 10) + 10
    return track_time


def make_log(username, comment):
    log_file = open('/data/logs.txt', 'a', encoding='utf-8')
    date = datetime.now().strftime("%d-%m-%Y")
    time = datetime.now().strftime("%H:%M:%S")

    log_file.write(f'[{date} {time}][@{username}][{comment}]\n')
    log_file.close()


@bot.message_handler(commands=['start'])
def start(message):
    make_log(message.from_user.username, 'START')
    if subscribe_check(message) == True:
        make_log(message.from_user.username, 'subscribed')
        db_check(message)
        control_panel(message)
    else:
        markup = InlineKeyboardMarkup()
        controlPanelButton = InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='subscribe')
        markup.add(controlPanelButton)

        make_log(message.from_user.username, 'not subscribed')
        bot.send_message(message.chat.id,
                         '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n\nhttps://t.me/sdb_party',
                         reply_markup=markup)


@bot.message_handler(commands=['admin'])
def admin_command(message):
    bot.register_next_step_handler(message, admin)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    global track_query, verified_track_name, transfer_verification_query, transfer_verification_callback, track_nu

    if callback.data == 'control_panel':
        make_log(callback.message.chat.username, 'control panel call')
        print(callback.message)
        if subscribe_check(callback.message) == True:
            control_panel(callback.message)

    elif callback.data == 'subscribe':
        subscribe = bot.get_chat_member(sdb_channel_id, callback.message.chat.id)
        if subscribe.status == "member" or subscribe.status == "creator" or subscribe.status == "administrator":
            make_log(callback.message.chat.username, 'subscribe')

            make_log(callback.message.chat.username, 'control panel')
            bot.send_message(callback.message.chat.id, '<b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>‚¨áÔ∏è', reply_markup=markupKeyboard,
                             parse_mode='html')
        else:
            make_log(callback.message.chat.username, 'did not subscribed')
            pass

    elif callback.data == 'information':
        bot.send_message(callback.message.chat.id, '–ß—Ç–æ-—Ç–æ –ø—Ä–æ –±–æ—Ç')

    elif callback.data == 'buy another ticket':
        make_log(callback.message.chat.username, 'buy another ticket')
        ticket_invoice(callback.message)

    elif callback.data == 'track list':
        make_log('admin', 'show all tracks')
        list_of_tracks()
        bot.send_message(callback.message.chat.id, tracks_text, reply_markup=delete_track_markup)

    elif callback.data == 'ticket list':
        make_log('admin', 'show all tickets')
        tickets = find_all_tickets()
        tickets_text = make_tickets_list_text(tickets)

        bot.send_message(callback.message.chat.id, tickets_text)
        bot.register_next_step_handler(callback.message, delete_ticket)

    elif callback.data == 'delete track':
        track_for_deleting = track_list[0]
        del track_list[0]
        make_log('admin', f"'{track_for_deleting}' deleted")

        list_of_tracks()
        bot.edit_message_text(tracks_text, callback.message.chat.id, callback.message.message_id,
                              reply_markup=delete_track_markup)

    elif callback.data == 'verify track':
        payment_markup = InlineKeyboardMarkup()
        card_payment_button = InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data='card')
        transfer_payment_button = InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data='transfer')
        # payment_markup.row(card_payment_button)
        payment_markup.row(transfer_payment_button)

        verified_track_name = track_name
        verified_track_dict[new_track_message.from_user.id] = verified_track_name

        make_log(new_track_message.from_user.username, f"'{verified_track_name}' verified")
        bot.edit_message_text('–¢—Ä–µ–∫ "' + verified_track_name + '" –æ–¥–æ–±—Ä–µ–Ω', callback.message.chat.id,
                              callback.message.message_id)
        bot.send_message(new_track_message.chat.id, '–¢—Ä–µ–∫ "' + verified_track_name + '" –æ–¥–æ–±—Ä–µ–Ωü•≥\n\n–û–ø–ª–∞—Ç–∞‚¨áÔ∏è', reply_markup=payment_markup)
        track_query = False

    elif callback.data == 'card':
        make_log(callback.from_user.username, f'card chosen')
        bot.send_invoice(
            callback.message.chat.id,
            '–¢—Ä–µ–∫ –Ω–∞ –∑–∞–∫–∞–∑',
            '–í–∞—à —Ç—Ä–µ–∫ –æ–¥–æ–±—Ä–µ–Ω!\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–π–¥–µ—Ç –æ–ø–ª–∞—Ç–∞, –º—ã –≤–∫–ª—é—á–∏–º ' + verified_track_dict[
                callback.from_user.id] + f' –≤ —Ç–µ—á–µ–Ω–∏–µ {track_waiting_time() - 10} –º–∏–Ω—É—Ç',
            verified_track_dict[callback.from_user.id],
            paymentToken,
            'RUB',
            track_price)

    elif callback.data == 'transfer':
        transfer_markup = InlineKeyboardMarkup()
        transfer_send_button = InlineKeyboardButton('–ü–µ—Ä–µ–≤–µ–ª(–∞)', callback_data='verify transfer')
        transfer_markup.add(transfer_send_button)

        make_log(new_track_message.from_user.username, f'transfer chosen')
        bot.send_message(callback.message.chat.id, '–ü–µ—Ä–µ–≤–æ–¥ 300‚ÇΩ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã –Ω–∞ *–°–±–µ—Ä–±–∞–Ω–∫*' +
                         '\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∑–∞–∫–∞–∑–∞–ª–∏' +
                         f' (`{verified_track_dict[callback.from_user.id]}`)' +
                         '\n–†–µ–∫–≤–∏–∑–∏—Ç—ã/—Ç—Ä–µ–∫ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏'
                         '\n\n`+7(920)631-39-51`' +
                         '\n\n`2202 2017 1573 9195`' +
                         '\n\n*–í–ª–∞–¥–∏—Å–ª–∞–≤ –ú–∞–∫—Å–∏–º–∏–ª–∏–∞–Ω–æ–≤–∏—á –Æ.*', reply_markup=transfer_markup, parse_mode="MARKDOWN")

    elif callback.data == 'verify transfer':
        make_log(new_track_message.from_user.username,
                 f"transfer '{verified_track_dict[callback.from_user.id]}' send to verification")
        if transfer_verification_query == False:
            transfer_verification_query = True
            transfer_verification_callback = callback

            make_log(new_track_message.from_user.username, 'no transfer query')

            admin_verify_transfer_markup = InlineKeyboardMarkup()
            admin_verify_transfer_button = InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
                                                                callback_data='admin verify transfer')
            admin_verify_transfer_markup.add(admin_verify_transfer_button)

            bot.send_message(905069756, f'–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –∑–∞ —Ç—Ä–µ–∫ "{verified_track_dict[callback.from_user.id]}"',
                             reply_markup=admin_verify_transfer_markup)
            bot.send_message(callback.message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞')

        else:
            make_log(new_track_message.from_user.username, 'TRANSFER QUERY')
            bot.send_message(callback.message.chat.id,
                             '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç—å-—á—É—Ç—å :)')

    elif callback.data == 'admin verify transfer':
        make_log('admin', f"transfer '{verified_track_dict[transfer_verification_callback.from_user.id]}' verified")
        transfer_verification_query = False
        track_list.append(verified_track_dict[transfer_verification_callback.from_user.id])
        bot.edit_message_text('–ü–µ—Ä–µ–≤–æ–¥ –∑–∞ —Ç—Ä–µ–∫ "' + verified_track_dict[transfer_verification_callback.from_user.id] +
                              '" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', callback.message.chat.id, callback.message.message_id)
        bot.send_message(transfer_verification_callback.message.chat.id,
                         f'–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ú—ã –≤–∫–ª—é—á–∏–º "{verified_track_dict[transfer_verification_callback.from_user.id]}" –≤ —Ç–µ—á–µ–Ω–∏–µ {track_waiting_time() - 10} –º–∏–Ω—É—Ç')
        make_log('INFO', f"Track list: {track_list}")

    elif callback.data == 'reject track':
        make_log(new_track_message.from_user.username, f"'{track_name}' rejected")
        bot.send_message(new_track_message.chat.id,
                         '–¢—Ä–µ–∫ –Ω–µ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫"')
        bot.edit_message_text('–¢—Ä–µ–∫ "' + track_name + '" –Ω–µ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω', callback.message.chat.id,
                              callback.message.message_id)
        track_query = False

    elif callback.data == 'statistic':
        bot.send_message(callback.message.chat.id, f'–ö–ª–∏–∫–æ–≤: {track_clicks}\n–û—Ç–º–µ–Ω: {track_cancellations}')


@bot.message_handler()
def answer(message):
    global track_query, party_name

    if message.text.lower() == '–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç':
        make_log(message.from_user.username, 'buy a ticket')
        tg_id = message.from_user.id

        conn = sqlite3.connect('/data/sdb.db')
        cursor = conn.cursor()

        cursor.execute('SELECT party_name FROM parties LIMIT 1')
        party_name = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT( * ) FROM tickets WHERE telegram_id = ?', (tg_id,))
        is_ticket_owner = cursor.fetchone()[0]

        if is_ticket_owner == 0:
            make_log(message.from_user.username, "don't have a ticket")
            ticket_invoice(message)
        else:
            cursor.execute('SELECT COUNT( * ) FROM tickets WHERE telegram_id = ?', (tg_id,))
            tickets_amount = cursor.fetchone()[0]

            ticket_markup = InlineKeyboardMarkup()
            another_ticket_button = InlineKeyboardButton('–î–∞', callback_data='buy another ticket')
            ticket_markup.add(another_ticket_button)

            text = f'–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –±–∏–ª–µ—Ç, –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –±–∏–ª–µ—Ç?\n\n<b>–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:</b>'
            ticket_keys = ''
            for i in range(tickets_amount):
                cursor.execute('SELECT ticket_key FROM tickets WHERE telegram_id = ? LIMIT ? OFFSET ?',
                               (tg_id, tickets_amount, i))
                key = cursor.fetchone()[0]
                text += f'\n‚Ä¢ –ë–∏–ª–µ—Ç {key}'
                ticket_keys += f'{key} '
            make_log(message.from_user.username, f'already have {tickets_amount} tickets(s): {ticket_keys.strip()}')
            bot.send_message(message.chat.id, text, reply_markup=ticket_markup, parse_mode='html')

        conn.commit()
        cursor.close()
        conn.close()

    elif message.text.lower() == '–∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫üé∂':
        global track_clicks
        track_clicks += 1
        make_log(message.from_user.username, 'request a song')

        if track_query == False:
            cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            cancel_button = InlineKeyboardButton('–û–¢–ú–ï–ù–ê')
            cancel_markup.add(cancel_button)

            bot.send_message(message.chat.id, '*–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–∫–∞ - 300‚ÇΩ*' +
                             '\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–∞–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ , –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –∏ –º—ã –≤–∫–ª—é—á–∏–º –µ–≥–æ –¥–ª—è —Ç–µ–±—è!üéµ' +
                             '\n\n‚ùó–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚ùó' +
                             '\n\n–¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é‚ò∫Ô∏è' +
                             '\n*–†–æ–∫, –º–µ—Ç–∞–ª, –¥–∂–∞–∑, –±–∞—Ä–±–∞—Ä–∏–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ –ø—Ä–æ–π–¥—É—Çüö´*' +
                             f'\n\n–¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(track_list)}' +
                             f'\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~ {track_waiting_time()} –º–∏–Ω—É—Ç', reply_markup=cancel_markup, parse_mode='markdown')
            bot.register_next_step_handler(message, track)
        else:
            make_log(message.from_user.username, 'TRACK QUERY')
            bot.send_message(message.chat.id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Çü•∫')

    elif message.text.lower() == '–æ sdb‚ÑπÔ∏è':
        bot.send_message(message.chat.id, '–ú—ã - *SDB PARTY*, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –Ω–æ—á–Ω—ã—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –≥–æ—Ä–æ–¥–∞ –†.'
                                          '\n\n*–ü–æ—á–µ–º—É SDB?* –ü–æ—Ç–æ–º—É —á—Ç–æ —á–µ—Ç–≤–µ—Ä–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –ª—é–±—è—Ç —Å–¥–æ–±–Ω—ã–µ –±—É–ª–æ—á–∫–∏ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç —Å–≤–æ–π —Å–∫–≤–∞–¥ - –°–¥–æ–±–Ω–∞—è –±—Ä–∞—Ç–≤–∞ ü•ê'
                                          '\n\n*SDB* - –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –∏ –∫ –∏—Ö —Ä–µ–∫–ª–∞–º–µ '
                                          '\n\nü™©*SDB* - –≤–µ—á–µ—Ä–∏–Ω–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –º—É–∑—ã–∫—É –∑–Ω–∞–µ—Ç –∫–∞–∂–¥—ã–π, –∏ —Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—É–¥–µ—à—å —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–µ—à—å üíÉ'
                                          '\n\n*SDB* - —Å–º–µ—à–Ω—ã–µ –∏ –ø–æ—Ä–æ–π –º–µ–≥–∞ –∫—Ä–∏–Ω–∂–µ–≤—ã–µ Reels –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ –∏ –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º –Ω–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ —É–º–µ–µ–º –ø–æ –¥—Ä—É–≥–æ–º—É, –∞ –ø–æ—Ç–æ–º—É —á—Ç–æ - —ç—Ç–æ —Å–º–µ—à–Ω–æ ü§≠'
                                          '\n\n–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –Ω–∞—à–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö –≤–æ *VMESTE BAR* ‚ù§Ô∏è', parse_mode='MARKDOWN')
        make_log(message.from_user.username, 'about us')

    elif message.text.lower() == '–∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ç—É—Å–æ–≤–∫–∞?üßê':
        conn = sqlite3.connect('/data/sdb.db')
        cursor = conn.cursor()

        cursor.execute('SELECT party_name, description, date FROM parties LIMIT 1')
        party_info = cursor.fetchall()

        info = ''
        for element in party_info:
            info += f'–°–ª–µ–¥—É—é—â–∞—è —Ç—É—Å–æ–≤–∫–∞: {element[0]}\n\n–î–∞—Ç–∞: {element[2]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{element[1]}'

        cursor.close()
        conn.close()

        sdb_logo = open('resources/sdb b –∞ 3.jpg', 'rb')
        bot.send_photo(message.chat.id, sdb_logo, caption=info)
        make_log(message.from_user.username, 'next party info')


def admin(message):
    if message.text.strip() == '14882012':
        admin_markup = InlineKeyboardMarkup()
        list_of_tracks_button = InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤', callback_data='track list')
        list_of_tickets_button = InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤', callback_data='ticket list')
        statistic_button = InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistic')
        admin_markup.row(list_of_tracks_button, list_of_tickets_button)
        admin_markup.row(statistic_button)

        bot.send_message(message.chat.id, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=admin_markup)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    global verified_track_name

    if message.successful_payment.invoice_payload == 'TICKET':
        tg_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        key = random.randint(0, 9999)
        make_log(message.from_user.username, f'ticket {key} paid successfully')

        conn = sqlite3.connect('/data/sdb.db')
        cursor = conn.cursor()

        cursor.execute('INSERT INTO tickets (first_name, username, telegram_id, ticket_key) VALUES (?, ?, ?, ?)',
                       (first_name, username, tg_id, key))

        conn.commit()
        cursor.close()
        conn.close()

        bot.send_message(message.chat.id, '–í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç! –í–∞—à –∫–æ–¥: ' + f'{key}', parse_mode='Markdown')

    elif message.successful_payment.total_amount == 30000:
        make_log(message.from_user.username, f"'{verified_track_dict[message.from_user.id]}' paid successfully")
        bot.send_message(905069756, f"'{message.successful_payment.invoice_payload}' –æ–ø–ª–∞—Ç–∏–ª–∏")
        bot.send_message(message.chat.id,
                         f'–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –ú—ã –≤–∫–ª—é—á–∏–º –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {track_waiting_time()} –º–∏–Ω—É—Ç',
                         parse_mode='Markdown')

        track_list.append(message.successful_payment.invoice_payload)
        make_log('INFO', f"Track list: {track_list}")


bot.infinity_polling()
